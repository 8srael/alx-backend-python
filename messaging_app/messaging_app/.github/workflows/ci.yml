name: Django CI

on:
  push:
    branches:
      - main
      - dev  # Ajoutez d'autres branches si nécessaire
  pull_request:
    branches:
      - main
      - dev  # Ajoutez d'autres branches si nécessaire

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-timeout=30s --health-start-period=5s --health-retries=3

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Python
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: 3.10

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Wait for MySQL to be ready
      - name: Wait for MySQL to be ready
        run: |
          dockerize -wait tcp://localhost:3306 -timeout 1m

      # Set up environment variables for Django database settings
      - name: Set up environment variables
        run: echo "DATABASE_URL=mysql://root:root_password@localhost:3306/test_db" >> $GITHUB_ENV

      # Run Django migrations and tests
      - name: Run Django tests
        run: |
          python manage.py migrate  # Apply migrations
          python manage.py test --noinput  # Run the tests

      # Run flake8 linting
      - name: Run flake8 for code linting
        run: |
          pip install flake8
          flake8 .  # Run flake8 on the entire project
        continue-on-error: false  # Fail the build if flake8 detects errors

      # Generate coverage report and upload it as an artifact
      - name: Run tests with coverage
        run: |
          pip install pytest pytest-cov
          pytest --cov=messaging_app --cov-report=xml  # Run tests with coverage and generate report
          
      # Upload coverage report as an artifact
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml  # Upload the coverage report (generated by pytest-cov)
